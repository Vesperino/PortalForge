// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PortalForge.Infrastructure.Persistence;

#nullable disable

namespace PortalForge.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251030154207_AddApprovalWorkflowEnhancements")]
    partial class AddApprovalWorkflowEnhancements
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NewsHashtags", b =>
                {
                    b.Property<int>("NewsId")
                        .HasColumnType("integer");

                    b.Property<int>("HashtagId")
                        .HasColumnType("integer");

                    b.HasKey("NewsId", "HashtagId");

                    b.HasIndex("HashtagId");

                    b.ToTable("NewsHashtags", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Changes")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EntityId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("UserId");

                    b.ToTable("AuditLogs", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.CachedLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("CachedLocations", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attendees")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("NewsId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TargetDepartments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StartDate");

                    b.ToTable("Events", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Hashtag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique();

                    b.ToTable("Hashtags", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EventDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventHashtag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("EventId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EventLatitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<string>("EventLocation")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("EventLongitude")
                        .HasPrecision(10, 7)
                        .HasColumnType("numeric(10,7)");

                    b.Property<string>("EventPlaceId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Excerpt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsEvent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Views")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EventDateTime");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("IsEvent");

                    b.ToTable("News", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RelatedEntityId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RelatedEntityType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_Notifications_CreatedAt");

                    b.HasIndex("UserId", "IsRead")
                        .HasDatabaseName("IX_Notifications_UserId_IsRead");

                    b.ToTable("Notifications", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.QuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<Guid>("QuizQuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequestApprovalStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("SelectedAnswer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("QuizQuestionId");

                    b.HasIndex("RequestApprovalStepId");

                    b.ToTable("QuizAnswers", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.QuizQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("RequestTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestTemplateId", "Order");

                    b.ToTable("QuizQuestions", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Request", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FormData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Standard");

                    b.Property<string>("RequestNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RequestTemplateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Draft");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubmittedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestNumber")
                        .IsUnique();

                    b.HasIndex("RequestTemplateId");

                    b.HasIndex("Status");

                    b.HasIndex("SubmittedAt");

                    b.HasIndex("SubmittedById");

                    b.ToTable("Requests", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestApprovalStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("QuizPassed")
                        .HasColumnType("boolean");

                    b.Property<int?>("QuizScore")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("Status");

                    b.HasIndex("RequestId", "StepOrder");

                    b.ToTable("RequestApprovalSteps", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestApprovalStepTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApproverGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("ApproverRole")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ApproverType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Role");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RequestTemplateId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiresQuiz")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("SpecificUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApproverGroupId");

                    b.HasIndex("SpecificUserId");

                    b.HasIndex("RequestTemplateId", "StepOrder");

                    b.ToTable("RequestApprovalStepTemplates", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("DepartmentId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("EstimatedProcessingDays")
                        .HasColumnType("integer");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("PassingScore")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresApproval")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IsActive");

                    b.ToTable("RequestTemplates", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestTemplateField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FieldType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HelpText")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsRequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("integer");

                    b.Property<int?>("MinValue")
                        .HasColumnType("integer");

                    b.Property<string>("Options")
                        .HasColumnType("jsonb");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Placeholder")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("RequestTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RequestTemplateId", "Order");

                    b.ToTable("RequestTemplateFields", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RoleGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RoleGroups", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RoleGroupPermission", b =>
                {
                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleGroupId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RoleGroupPermissions", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.HasIndex("UpdatedBy");

                    b.ToTable("SystemSettings", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Storage",
                            Description = "Base directory path for file storage",
                            Key = "Storage:BasePath",
                            UpdatedAt = new DateTime(2025, 10, 30, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = "C:\\PortalForge\\Storage"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Storage",
                            Description = "Subdirectory for news images (relative to BasePath)",
                            Key = "Storage:NewsImagesPath",
                            UpdatedAt = new DateTime(2025, 10, 30, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = "news-images"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Storage",
                            Description = "Subdirectory for documents (relative to BasePath)",
                            Key = "Storage:DocumentsPath",
                            UpdatedAt = new DateTime(2025, 10, 30, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = "documents"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Storage",
                            Description = "Maximum file size in megabytes",
                            Key = "Storage:MaxFileSizeMB",
                            UpdatedAt = new DateTime(2025, 10, 30, 9, 0, 0, 0, DateTimeKind.Utc),
                            Value = "10"
                        });
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DepartmentRole")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("Employee");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("MustChangePassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SupervisorId");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.UserRoleGroup", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleGroupId");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoleGroups", "public");
                });

            modelBuilder.Entity("NewsHashtags", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.Hashtag", null)
                        .WithMany()
                        .HasForeignKey("HashtagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.News", null)
                        .WithMany()
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.AuditLog", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.CachedLocation", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Event", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.News", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.Event", "Event")
                        .WithOne("News")
                        .HasForeignKey("PortalForge.Domain.Entities.News", "EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Notification", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.QuizAnswer", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.QuizQuestion", "QuizQuestion")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.RequestApprovalStep", "RequestApprovalStep")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("RequestApprovalStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");

                    b.Navigation("RequestApprovalStep");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.QuizQuestion", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.RequestTemplate", "RequestTemplate")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("RequestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestTemplate");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Request", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.RequestTemplate", "RequestTemplate")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.User", "SubmittedBy")
                        .WithMany()
                        .HasForeignKey("SubmittedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RequestTemplate");

                    b.Navigation("SubmittedBy");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestApprovalStep", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.Request", "Request")
                        .WithMany("ApprovalSteps")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestApprovalStepTemplate", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.RoleGroup", "ApproverGroup")
                        .WithMany()
                        .HasForeignKey("ApproverGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PortalForge.Domain.Entities.RequestTemplate", "RequestTemplate")
                        .WithMany("ApprovalStepTemplates")
                        .HasForeignKey("RequestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.User", "SpecificUser")
                        .WithMany()
                        .HasForeignKey("SpecificUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ApproverGroup");

                    b.Navigation("RequestTemplate");

                    b.Navigation("SpecificUser");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestTemplate", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestTemplateField", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.RequestTemplate", "RequestTemplate")
                        .WithMany("Fields")
                        .HasForeignKey("RequestTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequestTemplate");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RoleGroupPermission", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.Permission", "Permission")
                        .WithMany("RoleGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.RoleGroup", "RoleGroup")
                        .WithMany("RoleGroupPermissions")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("RoleGroup");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.SystemSetting", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.User", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "Supervisor")
                        .WithMany("Subordinates")
                        .HasForeignKey("SupervisorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.UserRoleGroup", b =>
                {
                    b.HasOne("PortalForge.Domain.Entities.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PortalForge.Domain.Entities.RoleGroup", "RoleGroup")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PortalForge.Domain.Entities.User", "User")
                        .WithMany("UserRoleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("RoleGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Event", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RoleGroupPermissions");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.QuizQuestion", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.Request", b =>
                {
                    b.Navigation("ApprovalSteps");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestApprovalStep", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RequestTemplate", b =>
                {
                    b.Navigation("ApprovalStepTemplates");

                    b.Navigation("Fields");

                    b.Navigation("QuizQuestions");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.RoleGroup", b =>
                {
                    b.Navigation("RoleGroupPermissions");

                    b.Navigation("UserRoleGroups");
                });

            modelBuilder.Entity("PortalForge.Domain.Entities.User", b =>
                {
                    b.Navigation("Subordinates");

                    b.Navigation("UserRoleGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
